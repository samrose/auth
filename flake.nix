# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.10)
/* the bootstrap process for setting this up:

#install nix

curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install

# install fh
nix profile install github:DeterminateSystems/fh

# create a new flake
fh init 

(answer the prompts)

#edit flake file

added go_1_21 gnumake and docker-compose to packages in devShell

added the shellHook to load .env and docker.env seen below

copied example.env to .env and example.docker.env to docker.env


now I can run `nix develop`,

and then I can run `make build` 

example

(nix:nix-shell-env) sam@localhost:~/auth$ make build
all modules verified
CGO_ENABLED=0 go build -ldflags "-X github.com/supabase/auth/internal/utilities.Version=`git describe --tags`" -buildvcs=false
CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "-X github.com/supabase/auth/internal/utilities.Version=`git describe --tags`" -buildvcs=false -o auth-arm64


$ ls -la
total 64612
drwxrwxr-x  10 sam sam     4096 Apr  8 10:23 .
drwxr-x--- 463 sam sam    20480 Apr  8 10:07 ..
-rw-rw-r--   1 sam sam       22 Apr  8 09:52 .dockerignore
-rw-r--r--   1 sam sam     7923 Apr  8 10:05 .env
drwxrwxr-x   8 sam sam     4096 Apr  8 10:18 .git
-rw-rw-r--   1 sam sam      538 Apr  8 09:52 .gitattributes
drwxrwxr-x   3 sam sam     4096 Apr  8 09:52 .github
-rw-rw-r--   1 sam sam      165 Apr  8 10:17 .gitignore
-rw-rw-r--   1 sam sam      178 Apr  8 09:52 .releaserc
-rw-rw-r--   1 sam sam    12036 Apr  8 09:52 CHANGELOG.md
-rw-rw-r--   1 sam sam       17 Apr  8 09:52 CODEOWNERS
-rw-rw-r--   1 sam sam     3225 Apr  8 09:52 CODE_OF_CONDUCT.md
-rw-rw-r--   1 sam sam    16427 Apr  8 09:52 CONTRIBUTING.md
-rw-rw-r--   1 sam sam      805 Apr  8 09:52 Dockerfile
-rw-rw-r--   1 sam sam      372 Apr  8 09:52 Dockerfile.dev
-rw-rw-r--   1 sam sam      172 Apr  8 09:52 Dockerfile.postgres.dev
-rw-rw-r--   1 sam sam     1088 Apr  8 09:52 LICENSE
-rw-rw-r--   1 sam sam     2894 Apr  8 09:52 Makefile
-rw-rw-r--   1 sam sam    35284 Apr  8 09:52 README.md
-rw-rw-r--   1 sam sam     2817 Apr  8 09:52 SECURITY.md
-rw-rw-r--   1 sam sam      915 Apr  8 09:52 app.json
-rwxr-xr-x   1 sam sam 33498657 Apr  8 10:23 auth <- this is the binary
-rwxr-xr-x   1 sam sam 32254105 Apr  8 10:23 auth-arm64 <- this is the binary
drwxrwxr-x   3 sam sam     4096 Apr  8 09:52 client
drwxrwxr-x   2 sam sam     4096 Apr  8 09:52 cmd
-rw-rw-r--   1 sam sam     1068 Apr  8 09:52 docker-compose-dev.yml
-rw-r--r--   1 sam sam      304 Apr  8 10:10 docker.env
drwxrwxr-x   2 sam sam     4096 Apr  8 09:52 docs
-rw-rw-r--   1 sam sam      304 Apr  8 09:52 example.docker.env
-rw-rw-r--   1 sam sam     7923 Apr  8 09:52 example.env
-rw-r--r--   1 sam sam     1302 Apr  8 10:02 flake.lock
-rw-rw-r--   1 sam sam     2180 Apr  8 10:23 flake.nix
-rw-rw-r--   1 sam sam     6823 Apr  8 09:52 go.mod
-rw-rw-r--   1 sam sam    92112 Apr  8 09:52 go.sum
drwxrwxr-x   2 sam sam     4096 Apr  8 09:52 hack
-rwxrwxr-x   1 sam sam      524 Apr  8 09:52 init_postgres.sh
drwxrwxr-x  13 sam sam     4096 Apr  8 09:52 internal
-rw-rw-r--   1 sam sam     1420 Apr  8 09:52 main.go
drwxrwxr-x   2 sam sam     4096 Apr  8 09:52 migrations
-rw-rw-r--   1 sam sam    67674 Apr  8 09:52 openapi.yaml

and `make dev` can also be run, and will launch docker compose etc
*/

{
  # A helpful description of your flake
  description = "supabase/auth";

  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1.*.tar.gz";
  };

  # Flake outputs that other flakes can use
  outputs = { self, flake-schemas, nixpkgs }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-darwin" "x86_64-darwin" "aarch64-linux" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import nixpkgs { inherit system; };
      });
    in {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # Development environments
      devShells = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.mkShell {
          # Pinned packages available in the environment
          packages = with pkgs; [
            go_1_21
            gnumake
            docker-compose
            curl
            git
            jq
            wget
            nixpkgs-fmt
          ];

          # A hook run every time you enter the environment
          shellHook = ''
            if [ -f .env ]; then
              echo "Loading .env"
              source .env
            fi
            if [ -f docker.env ]; then
              echo "Loading docker.env"
              source docker.env
            fi
          '';
        };
      });
    };
}
